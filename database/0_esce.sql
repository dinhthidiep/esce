CREATE DATABASE ESCE;
USE ESCE;
------------------------------------------------
-- 1. Vai trò & tài khoản
------------------------------------------------
CREATE TABLE ROLES (
    ID INT PRIMARY KEY IDENTITY(1,1),
    NAME NVARCHAR(50) UNIQUE NOT NULL,         -- Admin, User, Host, Staff
    DESCRIPTION NVARCHAR(255)
);

CREATE TABLE ACCOUNTS (
    ID INT IDENTITY(1,1) PRIMARY KEY, 
    NAME NVARCHAR(100) NOT NULL,
    EMAIL NVARCHAR(100) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    PASSWORD_SALT VARCHAR(255) NULL,
    AVATAR NVARCHAR(255),
    PHONE VARCHAR(20),
    DOB DATE,
    GENDER NVARCHAR(10),
    ADDRESS NVARCHAR(255),
    IS_ACTIVE BIT DEFAULT 1,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    ROLE_ID INT NOT NULL,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);

------------------------------------------------
-- 2. OTP xác thực
------------------------------------------------
CREATE TABLE OTP (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,
    CODE NVARCHAR(10) NOT NULL,
    EXPIRATION_TIME DATETIME NOT NULL,
    IS_VERIFIED BIT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID)
);

------------------------------------------------
-- 3. Tours & Khuyến mãi
------------------------------------------------
CREATE TABLE TOURS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME NVARCHAR(255) NOT NULL,
    ADDRESS NVARCHAR(255) NOT NULL,
    DESCRIPTION NVARCHAR(1000),
    PRICE DECIMAL(18,2) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    CAPACITY INT NOT NULL,
    AVAILABLE_SLOTS INT NOT NULL,
    IMAGE NVARCHAR(255),
    STATUS NVARCHAR(50) DEFAULT 'open',         -- open / closed / canceled
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    HOST_ID INT NOT NULL,
    FOREIGN KEY (HOST_ID) REFERENCES ACCOUNTS(ID)
);

CREATE TABLE PROMOTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    CODE NVARCHAR(50) UNIQUE NOT NULL,
    DESCRIPTION NVARCHAR(255),
    DISCOUNT_PERCENT DECIMAL(5,2) NULL,
    DISCOUNT_AMOUNT DECIMAL(18,2) NULL,
    START_DATE DATETIME NOT NULL,
    END_DATE DATETIME NOT NULL,
    CREATED_BY ICNT NOT NULL,                   -- Ai tạo mã (Admin hoặc Host)
    SCOPE_TYPE NVARCHAR(20) NOT NULL,          -- 'SYSTEM' hoặc 'TOUR'
    IS_ACTIVE BIT DEFAULT 1,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CREATED_BY) REFERENCES ACCOUNTS(ID)
);

CREATE TABLE TOUR_PROMOTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    TOUR_ID INT NOT NULL,
    PROMOTION_ID INT NOT NULL,
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID),
    FOREIGN KEY (PROMOTION_ID) REFERENCES PROMOTIONS(ID)
);

------------------------------------------------
-- 4. Đặt tour (cá nhân & nhóm)
------------------------------------------------
CREATE TABLE BOOKINGS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,                       -- Người đặt
    TOUR_ID INT NOT NULL,
    BOOKING_DATE DATETIME DEFAULT GETDATE(),
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    QUANTITY INT NOT NULL,
    TOTAL_AMOUNT DECIMAL(18,2) NOT NULL,
    NOTES NVARCHAR(500),
    STATUS NVARCHAR(50) DEFAULT 'pending',      -- pending / confirmed / canceled / paid
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID)
);

CREATE TABLE BOOKING_PROMOTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    BOOKING_ID INT NOT NULL,
    PROMOTION_ID INT NOT NULL,
    APPLIED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(ID),
    FOREIGN KEY (PROMOTION_ID) REFERENCES PROMOTIONS(ID),
    CONSTRAINT UQ_BookingPromotion UNIQUE (BOOKING_ID, PROMOTION_ID)
)
)
CREATE TABLE GROUP_BOOKINGS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    TOUR_ID INT NOT NULL,                              
    LEADER_ID INT NOT NULL,                            
    INVITE_CODE NVARCHAR(50) UNIQUE NOT NULL,          
    STATUS NVARCHAR(50) DEFAULT 'pending',             
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID),
    FOREIGN KEY (LEADER_ID) REFERENCES ACCOUNTS(ID)
);

CREATE TABLE GROUP_MEMBERS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    GROUP_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    ROLE NVARCHAR(20) DEFAULT 'member',                
    STATUS NVARCHAR(50) DEFAULT 'joined',              
    JOINED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (GROUP_ID) REFERENCES GROUP_BOOKINGS(ID),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID),
    CONSTRAINT UQ_GroupMember UNIQUE (GROUP_ID, USER_ID)
);

------------------------------------------------
-- 5. Thanh toán
------------------------------------------------
CREATE TABLE PAYMENTS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    BOOKING_ID INT NOT NULL,
    AMOUNT DECIMAL(18,2) NOT NULL,
    PAYMENT_DATE DATETIME DEFAULT GETDATE(),
    METHOD NVARCHAR(50),                        
    STATUS NVARCHAR(50) DEFAULT 'pending',      
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(ID)
);

------------------------------------------------
-- 6. Reviews
------------------------------------------------
CREATE TABLE REVIEWS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    TOUR_ID INT NOT NULL,                         -- Chỉ review cho tour
    AUTHOR_ID INT NOT NULL,                       -- Người viết review
    PARENT_REVIEW_ID INT NULL,                    -- Nếu là reply thì trỏ đến Review cha
    RATING INT NULL,                              -- Điểm 1–5 sao, chỉ review gốc mới có
    CONTENT NVARCHAR(MAX) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (PARENT_REVIEW_ID) REFERENCES REVIEWS(ID)
);


------------------------------------------------
-- 7. Notifications
------------------------------------------------
CREATE TABLE NOTIFICATIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,
    MESSAGE NVARCHAR(500),
    IS_READ BIT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID)
);

------------------------------------------------
-- 8. Mạng xã hội mini
CREATE TABLE POSTS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    TITLE NVARCHAR(255) NOT NULL,
    CONTENT NVARCHAR(MAX) NOT NULL,
    AUTHOR_ID INT NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (AUTHOR_ID) REFERENCES ACCOUNTS(ID)
);

CREATE TABLE COMMENTS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    POST_ID INT NOT NULL,                       -- Bình luận thuộc bài viết nào
    AUTHOR_ID INT NOT NULL,                     -- Ai viết bình luận
    PARENT_COMMENT_ID INT NULL,                 -- Nếu là reply thì tham chiếu comment cha
    CONTENT NVARCHAR(MAX) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (POST_ID) REFERENCES POSTS(ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (PARENT_COMMENT_ID) REFERENCES COMMENTS(ID)
);
/*CREATE TABLE REACTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,
    POST_ID INT NULL,
    COMMENT_ID INT NULL,
    REACTION_TYPE NVARCHAR(20) NOT NULL, -- Like / Love / Haha / Angry...
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (POST_ID) REFERENCES POSTS(ID),
    FOREIGN KEY (COMMENT_ID) REFERENCES COMMENTS(ID),
    CHECK (
        (POST_ID IS NOT NULL AND COMMENT_ID IS NULL) OR
        (POST_ID IS NULL AND COMMENT_ID IS NOT NULL)
    )
);

*/

CREATE TABLE REACTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,                  -- Ai react
    TARGET_TYPE NVARCHAR(20) NOT NULL,     -- 'POST', 'COMMENT' (sau này có thể mở rộng: 'REVIEW', 'MESSAGE'...)
    TARGET_ID INT NOT NULL,                -- ID của Post hoặc Comment
    REACTION_TYPE NVARCHAR(20) NOT NULL,   -- Like / Love / Haha / Angry...
    CREATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID)
);

----------------------------------------
-- 9. Tin nhắn cá nhân (1-1)
------------------------------------------------
CREATE TABLE MESSAGES (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    SENDER_ID INT NOT NULL,
    RECEIVER_ID INT NOT NULL,
    CONTENT NVARCHAR(2000) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    IS_READ BIT DEFAULT 0,
    FOREIGN KEY (SENDER_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (RECEIVER_ID) REFERENCES ACCOUNTS(ID)
);

------------------------------------------------
-- 10. Khiếu nại & xử lý
------------------------------------------------
CREATE TABLE COMPLAINTS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,
    TOUR_ID INT,
    BOOKING_ID INT,
    TITLE NVARCHAR(255) NOT NULL,
    CONTENT NVARCHAR(1000) NOT NULL,
    STATUS NVARCHAR(50) DEFAULT 'Pending',    
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID),
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(ID)
);

CREATE TABLE COMPLAINT_ACTIONS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    COMPLAINT_ID INT NOT NULL,
    HANDLER_ID INT NOT NULL,
    ACTION_NOTE NVARCHAR(1000),
    ACTION_DATE DATETIME DEFAULT GETDATE(),
    STATUS_AFTER NVARCHAR(50),
    FOREIGN KEY (COMPLAINT_ID) REFERENCES COMPLAINTS(ID),
    FOREIGN KEY (HANDLER_ID) REFERENCES ACCOUNTS(ID)
);

------------------------------------------------
-- 11. Hỗ trợ
------------------------------------------------
CREATE TABLE REQUEST_SUPPORTS (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT NOT NULL,
    TOUR_ID INT NULL,
    SUPPORT_TYPE NVARCHAR(255),
    CONTENT NVARCHAR(1000) NOT NULL,
    STATUS NVARCHAR(50) DEFAULT 'Pending',
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES ACCOUNTS(ID),
    FOREIGN KEY (TOUR_ID) REFERENCES TOURS(ID)
);

